<?php

namespace App\Models;

use Dyrynda\Database\Support\CascadeSoftDeletes;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;

class Brand extends Model
{
    use HasFactory, SoftDeletes, CascadeSoftDeletes;

    protected $table = 'brands';

    protected $fillable = [
        'name', 'stock', 'address', 'image', 'created_by', 'updated_by', 'deleted_by'
    ];

    protected $appends = [
        'stock'
    ];

    protected $cascadeDeletes = ['inventories', 'sales'];

    public function getStockAttribute()
    {
        if (isset($this->attributes['id'])) {
            $brandId = $this->attributes['id'];
            $inventorySum = Inventory::query()->where('brand_id', $brandId)->sum('quantity');
            $saleSum = Sale::query()->where('brand_id', $brandId)->sum('quantity');
            return (double)$inventorySum - $saleSum;
        }
        return 0;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($model) {
            $model->created_by = Auth::id();
        });

        self::updating(function ($model) {
            $model->updated_by = Auth::id();
        });

        self::deleting(function ($model) {
            $model->deleted_by = Auth::id();
        });
    }

    public function inventories(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(Inventory::class);
    }
    public function sales(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(Sale::class);
    }
}
